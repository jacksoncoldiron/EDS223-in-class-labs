---
title: "Discussion 3: Vector Operations"
author: "Jackson Coldiron"
date: last-modified
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
---

## 1. Get Started
#### Load Necessary Packages
```{r}
library(here)
library(tidyverse)
library(sf)
library(tmap)
```

#### Load data
```{r}
sb_protected_areas <- st_read(here("week3", "data", "cpad_super_units_sb.shp")) |>  
  st_transform("ESRI:102009")

sb_city_boundaries <- st_read(here("week3", "data", "sb_city_boundaries_2003.shp")) |> 
  st_transform("ESRI:102009")

sb_county_boundary <- st_read(here("week3", "data", "sb_county_boundary_2020.shp")) |> 
  st_transform("ESRI:102009")

aves <- st_read(here("week3", "data", "aves_observations_2020_2024.shp")) |> 
  st_transform("ESRI:102009")
```

## 2. Find bird observations within PA in Santa Barbara
#### First with a spatial subset
```{r}
# Use subsetting to find what bird observations exist in the sb protected areas dataframe
aves_PA_subset <- sb_protected_areas[aves, ]

# Check how many rows there are
nrow(aves_PA_subset) # 35 observations within protected areas

# Plot the bird observations in 
tm_shape(sb_county_boundary) +
  tm_fill() +
  tm_shape(sb_protected_areas) +
  tm_borders(lwd = 1, col = "#fb8500") +
    tm_fill(col = "#fb8500", alpha = 0.2) +
    tm_shape(aves_PA_subset) +
    tm_dots(col = "#023047")
```

#### Second with a spatial join
```{r}
# Join with st_join() defaulting to st_intersect()
aves_PA_join <- st_join(aves, sb_protected_areas)

# Check number of observations
nrow(aves_PA_join)

# Plot the map 
tm_shape(sb_county_boundary) +
  tm_fill() +
  tm_shape(sb_protected_areas) +
  tm_borders(lwd = 1, col = "#fb8500") +
    tm_fill(col = "#fb8500", alpha = 0.2) +
    tm_shape(aves_PA_join) +
    tm_dots(col = "#023047")

```

#### Use a buffer
```{r}
st_crs(sb_protected_areas)$units # Check if units are in meters

PA_buffer_5km <- st_buffer(sb_protected_areas, dist = 5000) # Create 5000 m buffer around PAs

aves_buffer_subset <- PA_buffer_5km[aves, ] # Subset

nrow(aves_buffer_subset) # Check number of rows

tm_shape(sb_county_boundary) +
  tm_fill() +
  tm_shape(sb_protected_areas) +
    tm_borders(lwd = 1, col = "#fb8500") +
    tm_fill(col = "#fb8500", alpha = 0.2) +
  tm_shape(aves_buffer_subset) +
  tm_dots(col = "#023047")
```

## 3. Find PAs within 15km of Goleta
Find the protected areas within 15 km of a city in Santa Barbara County
Hint: Use dplyr::filter() to select a city from sb_city_boundaries

```{r}
# Subset SB county to Goleta
goleta <- sb_city_boundaries |> 
  dplyr::filter(NAME == "Goleta")

st_crs(goleta)$units  # Check if units are in meters

goleta_buffer_15km <- st_buffer(goleta, dist = 15000) # Create 15 km buffer around Goleta

goleta_PAs_within <- st_within(sb_protected_areas, goleta_buffer_15km)

goleta_PAs_intersect <- st_intersects(sb_protected_areas, goleta_buffer_15km)

goleta_PAs_intersection <- st_intersection(sb_protected_areas, goleta_buffer_15km)

goleta_PAs_join <- st_join(sb_protected_areas, goleta, st_is_within_distance, dist = 15000)
```

## 4. Find distance between Goleta and Dangermond Preserve
Find the distance between your city of choice and a protected area of your choice, using the geometriesâ€™ edges and the centroid
Solution
# Subset PA to Dangermond Preserve
```{r}
dangermond <- sb_protected_areas |>
  dplyr::filter(UNIT_NAME == "Jack and Laura Dangermond Preserve")

danger_dist <- st_distance(goleta, dangermond) # Compute the distance between geometries edges

# Calculate the geometric center
dangermond_centroid <- st_centroid(dangermond)
goleta_centroid <- st_centroid(goleta)

danger_dist_centroid <- st_distance(goleta_centroid, dangermond_centroid) # Compute the distance between geometries edges

# Check if the distance matrices are equal
danger_dist == danger_dist_centroid
```

